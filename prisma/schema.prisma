generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================
// 1. CORE MULTI-TENANT & AUTH MODELS
// =============================================

model Workspace {
  id          String   @id @default(cuid())
  name        String
  ownerId     String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner             User      @relation("WorkspaceOwner", fields: [ownerId], references: [id])
  users             User[]    @relation("WorkspaceMembers")
  transactions      Transaction[]
  scheduledPayments ScheduledPayment[]
  assets            Asset[]
  categories        Category[]
  projects          Project[]
  partnerProfile    PartnerProfile?
}

model User {
  id                   String          @id @default(cuid())
  name                 String?
  email                String          @unique
  emailVerified        DateTime?
  password             String?
  image                String?
  role                 UserRole        @default(MEMBER)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt

  workspaceId          String
  workspace            Workspace       @relation("WorkspaceMembers", fields: [workspaceId], references: [id], onDelete: Cascade)
  ownedWorkspace       Workspace?      @relation("WorkspaceOwner")
  accounts             Account[]
  sessions             Session[]
  approvedTransactions Transaction[]   @relation("ApprovedTransactions")
}

enum UserRole {
  OWNER
  ADMIN
  MEMBER
  ACCOUNTANT
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// =============================================
// 2. CORE BUSINESS LOGIC MODELS
// =============================================

model Transaction {
  id             String         @id @default(cuid())
  description    String
  amount         Float
  currency       String
  date           DateTime
  type           TransactionType @default(EXPENSE)
  approvalStatus ApprovalStatus @default(PENDING)
  approvedById   String?
  approvedAt     DateTime?

  approvedBy  User?      @relation("ApprovedTransactions", fields: [approvedById], references: [id], onDelete: SetNull)
  categoryId  String?
  category    Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  projectId   String?
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: SetNull)
  workspaceId String
  workspace   Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model ScheduledPayment {
  id          String    @id @default(cuid())
  description String
  amount      Float
  currency    String
  dueDate     DateTime
  isRecurring Boolean   @default(false)
  frequency   String? // e.g., 'MONTHLY', 'YEARLY'

  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  reminders   Reminder[]
}

model Reminder {
  id                 String           @id @default(cuid())
  daysBefore         Int
  scheduledPaymentId String
  scheduledPayment   ScheduledPayment @relation(fields: [scheduledPaymentId], references: [id], onDelete: Cascade)
}

model Category {
  id                String             @id @default(cuid())
  name              String
  color             String?            @default("#FFFFFF")
  workspaceId       String
  workspace         Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  transactions      Transaction[]
  scheduledPayments ScheduledPayment[]

  @@unique([workspaceId, name])
}

model Project {
  id           String        @id @default(cuid())
  name         String
  workspaceId  String
  workspace    Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Asset {
  id           String   @id @default(cuid())
  name         String
  qrCode       String?  @unique
  purchaseDate DateTime
  initialValue Float
  workspaceId  String
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

// =============================================
// 3. MLM & PARTNER MODELS
// =============================================

model PartnerProfile {
  id               String           @id @default(cuid())
  workspaceId      String           @unique
  workspace        Workspace        @relation(fields: [workspaceId], references: [id])
  referralCode     String           @unique
  uplinePartnerId  String?
  uplinePartner    PartnerProfile?  @relation("ReferralTree", fields: [uplinePartnerId], references: [id], onDelete: SetNull)
  downlinePartners PartnerProfile[] @relation("ReferralTree")
  payouts          Payout[]
  earnings         Earning[]
}

model Earning {
  id               String         @id @default(cuid())
  partnerProfileId String
  partnerProfile   PartnerProfile @relation(fields: [partnerProfileId], references: [id])
}

model Payout {
  id               String         @id @default(cuid())
  partnerProfileId String
  partnerProfile   PartnerProfile @relation(fields: [partnerProfileId], references: [id])
}
