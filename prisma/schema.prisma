// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relationships
  accounts      Account[]
  sessions      Session[]
  ownedTeams    Team[]    @relation("TeamOwner")
  memberTeams   TeamMember[]
  bills         Bill[]    @relation("BillCreator")
  notifications Notification[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String

  // Relationships
  owner       User        @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members     TeamMember[]
  bills       Bill[]
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      UserRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model Bill {
  id          String    @id @default(cuid())
  name        String
  description String?
  amount      Float
  currency    String    @default("USD")
  dueDate     DateTime
  isPaid      Boolean   @default(false)
  paidDate    DateTime?
  isRecurring Boolean   @default(false)
  frequency   String?   // daily, weekly, monthly, yearly
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  creatorId   String
  teamId      String?
  categoryId  String?

  // Relationships
  creator     User      @relation("BillCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  team        Team?     @relation(fields: [teamId], references: [id], onDelete: SetNull)
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  reminders   Reminder[]
}

model Category {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#6366F1") // Default indigo color
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  bills     Bill[]
}

model Reminder {
  id        String   @id @default(cuid())
  billId    String
  remindAt  DateTime
  sent      Boolean  @default(false)
  sentAt    DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  bill      Bill     @relation(fields: [billId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relationships
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  OWNER
  ADMIN
  ACCOUNTANT
  MEMBER
}

enum NotificationType {
  BILL_DUE
  BILL_PAID
  TEAM_INVITE
  PAYMENT_REMINDER
  SYSTEM
}
